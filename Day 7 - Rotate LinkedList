# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        if head == None or head.next==None or k==0:
            return head
        
        temp = head
        l = 0
        tail = head
        
    
        while temp:
            l += 1
            tail = temp
            temp = temp.next
            
        if k%l==0:
            return head
        if k>l:
            k = k % l
            
        
        tail.next = head
        rotate = l - k - 1
        
        cur = head
        for i in range(rotate):
            cur = cur.next
            
        head = cur.next
        cur.next = None
        
        return head
        
            
        
#         if head == None or head.next==None or k==0:
#             return head
        
#         temp = head
#         l = 0

#         while temp:
#             l += 1
#             temp = temp.next
            
#         if k%l==0:
#             return head
#         if k>l:
#             k = k % l
        
        
        
#         def fun(head):
#             prev = None 
#             cur = head
#             while cur:
#                 temp = cur.next
#                 cur.next = prev
#                 prev = cur
#                 cur = temp

#             return prev
        
#         rev = fun(head)
        
#         dummy = ListNode(0)
#         pre = cur = nex = dummy
#         dummy.next = rev 
       
        
#         cur = pre.next
#         nex = cur.next
#         for i in range(1, k):
#             cur.next = nex.next
#             nex.next = pre.next
#             pre.next = nex
#             nex = cur.next
        
        
#         pre = cur
#         # print(k ,l)
#         cur = pre.next
#         nex = cur.next
#         for i in range(k+1, l):
#             cur.next = nex.next
#             nex.next = pre.next
#             pre.next = nex
#             nex = cur.next
        
        
#         return dummy.next
        
        
        
        
        
