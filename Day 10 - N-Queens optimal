class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:


        leftrow = [0]*n
        upperdiag = [0]*(2*n-1)
        lowerdiag = [0]*(2*n-1)
        
        ans = []
        def fun(mat , col):
            if col==n:
                ans.append(deepcopy(mat))
                return
            
            for i in range(n):
                if leftrow[i]==0 and upperdiag[n-1+col-i]==0 and lowerdiag[i+col]==0:
                    mat[i][col]="Q"
                    leftrow[i] = 1
                    upperdiag[n-1+col-i] = 1
                    lowerdiag[i+col] = 1
                    
                    fun(mat , col+1)
                    
                    mat[i][col]="."
                    leftrow[i] = 0
                    upperdiag[n-1+col-i] = 0
                    lowerdiag[i+col] = 0
        
        def createBoard(n):
            row = ["." for i in range(n)]
            return [row[:] for i in range(n)]  
        
        mat = createBoard(n)
        # print(mat)
        fun(mat , 0)
        
        
       
        
        res = []
        for i in ans:
            arr = []
            for j in i:
                temp = "".join(j)
                arr.append(temp)
            res.append(arr)
        

        return res
            
            
                
                
                
            
