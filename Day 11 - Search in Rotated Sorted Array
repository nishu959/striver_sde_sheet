class Solution:
    def bs(self,arr, low , end, tar):
    
        while low <= end:
            mid = low + (end-low)//2
            
            if arr[mid] == tar:
                return mid
            elif tar > arr[mid]:
                low = mid +1 
            else:
                end = mid - 1
                
        return -1
                
            
    
                
    def search(self, nums: List[int], target: int) -> int:
        n = len(nums)
        start = 0
        end = n - 1
        rotate = -1
        while start<=end:
            
            if nums[start] <= nums[end]:
                rotate = start
                break
                
            mid = (start + end)//2
            prev = (mid+ n-1) % n
            next = (mid+1) % n
            
            if nums[mid]<=nums[prev] and nums[mid]<=nums[next]:
                rotate = mid
                break
            
            elif nums[start] <= nums[mid]:
                start = mid + 1
                
            elif nums[mid] <= nums[end]:
                end = mid-1
        
        # print(rotate)
        ans1 = self.bs(nums,0,rotate-1,target)
        ans2 = self.bs(nums,rotate,n-1,target)
        
        if ans1!=-1:
            return ans1
        if ans2!=-1:
            return ans2
        
        if ans1==-1 and ans2==-1:
            return -1
        
                
        
