from os import *
from sys import *
from collections import *
from math import *

def merge(arr,temp, start , mid , end):
    inv = 0
    i = start
    j = mid
    k = start
    while (i<=mid-1) and (j<=end):
        if arr[i]<=arr[j]:
            temp[k]=arr[i]
            k += 1
            i += 1
        else:
            temp[k]=arr[j]
            inv += mid-i
            j += 1
            k += 1
            
    while i<=mid-1:
        temp[k]=arr[i]
        k += 1
        i += 1
    while j<=end:
        temp[k]=arr[j]
        j += 1
        k += 1
        
    for k in range(start , end+1):
        arr[k] = temp[k]
                    
    return inv

def merge_sort(arr,temp, start ,end):
    count = 0
    if end>start:
        mid = (start+end)//2
        count += merge_sort(arr,temp, start , mid)
        count += merge_sort(arr,temp, mid+1 , end)
        
        count += merge(arr,temp, start ,mid+1, end)
        
    return count
    
    

def getInversions(arr, n):
    s = 0
    end = n-1
    temp = [None]*(n)
    p = merge_sort(arr,temp , 0, end)
    return p             
# Taking inpit using fast I/O.
def takeInput() :
    n = int(input())
    arr = list(map(int, stdin.readline().strip().split(" ")))
    return arr, n

# Main.
arr, n = takeInput()
print(getInversions(arr, n))
