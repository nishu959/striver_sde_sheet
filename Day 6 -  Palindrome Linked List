# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        def middle(root):
            slow = root
            fast = root
            while fast and fast.next:
                slow = slow.next
                fast = fast.next.next
                
            return slow
        
        def rev(root):
            prev = None
            cur = root
            while cur:
                temp = cur.next
                cur.next = prev
                prev = cur
                cur = temp
                
            return prev
        
        node = middle(head)
        head2 = rev(node)
        
        
        while head and head2:
            if head.val != head2.val:
                return False
            head = head.next
            head2 = head2.next
        return True
        
