# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:
        temp1 = headA
        temp2 = headB
        c = 0
        while temp1 != temp2:
            temp1 = temp1.next
            temp2 = temp2.next
            
            if temp1 == None:
                c += 1
                temp1 = headB
            
            if temp2 == None:
                c += 1
                temp2 = headA
                
            if c>2:
                return None
                
        
        return temp1
        
#Little lengthy same concept
#         m =n = 0
#         temp= headA
#         temp2 = headB
#         while temp:
#             m += 1
#             temp = temp.next
            
#         while temp2:
#             n += 1
#             temp2 = temp2.next
            
#         diff = abs(m-n)
#         p1 = headA
#         p2 = headB
#         if m>=n:
#             while diff > 0:
#                 p1 = p1.next
#                 diff -= 1
                
#         else:
#             while diff > 0:
#                 p2 = p2.next
#                 diff -= 1
                
#         while p1!=None and p2!=None:
#             if p1==p2:
#                 return p1
#             p1 = p1.next
#             p2 = p2.next
            
#         return None
        
        
                
            
